/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Widget {
    _unused: [u8; 0],
}
pub type Fl_Callback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void)>;
pub type custom_handler_callback = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Fl_Widget,
        arg2: cty::c_int,
        arg3: *mut cty::c_void,
    ) -> cty::c_int,
>;
pub type custom_draw_callback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Group {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Group_new(
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
        title: *const cty::c_char,
    ) -> *mut Fl_Group;
}
extern "C" {
    pub fn Fl_Group_x(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_y(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_width(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_height(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_label(arg1: *mut Fl_Group) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Group_set_label(arg1: *mut Fl_Group, title: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Group_redraw(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_show(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_hide(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_activate(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_deactivate(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_redraw_label(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_resize(
        arg1: *mut Fl_Group,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Group_widget_resize(
        arg1: *mut Fl_Group,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Group_tooltip(arg1: *mut Fl_Group) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Group_set_tooltip(arg1: *mut Fl_Group, txt: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Group_get_type(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_set_type(arg1: *mut Fl_Group, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_color(arg1: *mut Fl_Group) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Group_set_color(arg1: *mut Fl_Group, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Group_measure_label(
        arg1: *const Fl_Group,
        arg2: *mut cty::c_int,
        arg3: *mut cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Group_label_color(arg1: *mut Fl_Group) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Group_set_label_color(arg1: *mut Fl_Group, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Group_label_font(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_set_label_font(arg1: *mut Fl_Group, font: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_label_size(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_set_label_size(arg1: *mut Fl_Group, sz: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_label_type(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_set_label_type(arg1: *mut Fl_Group, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_box(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_set_box(arg1: *mut Fl_Group, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_changed(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_set_changed(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_clear_changed(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_align(arg1: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_set_align(arg1: *mut Fl_Group, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_delete(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_set_image(arg1: *mut Fl_Group, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_handle(
        self_: *mut Fl_Group,
        cb: custom_handler_callback,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Group_handle_event(self_: *mut Fl_Group, event: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_draw(self_: *mut Fl_Group, cb: custom_draw_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_resize_callback(
        self_: *mut Fl_Group,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: cty::c_int,
                y: cty::c_int,
                w: cty::c_int,
                h: cty::c_int,
                arg2: *mut cty::c_void,
            ),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Group_set_when(arg1: *mut Fl_Group, arg2: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_when(arg1: *const Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_image(arg1: *const Fl_Group) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Group_parent(self_: *const Fl_Group) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Group_selection_color(arg1: *mut Fl_Group) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Group_set_selection_color(arg1: *mut Fl_Group, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Group_do_callback(arg1: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_inside(self_: *const Fl_Group, arg1: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_window(arg1: *const Fl_Group) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Group_top_window(arg1: *const Fl_Group) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Group_takes_events(arg1: *const Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_user_data(arg1: *const Fl_Group) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Group_take_focus(self_: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_set_visible_focus(self_: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_clear_visible_focus(self_: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_visible_focus(self_: *mut Fl_Group, v: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_has_visible_focus(self_: *mut Fl_Group) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Group_set_user_data(arg1: *mut Fl_Group, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_draw_data(self_: *const Fl_Group) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Group_handle_data(self_: *const Fl_Group) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Group_set_draw_data(self_: *mut Fl_Group, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_set_handle_data(self_: *mut Fl_Group, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_damage(self_: *const Fl_Group) -> cty::c_uchar;
}
extern "C" {
    pub fn Fl_Group_set_damage(self_: *mut Fl_Group, flag: cty::c_uchar);
}
extern "C" {
    pub fn Fl_Group_set_damage_area(
        self_: *mut Fl_Group,
        flag: cty::c_uchar,
        x: cty::c_int,
        y: cty::c_int,
        w: cty::c_int,
        h: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Group_clear_damage(self_: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_as_window(self_: *mut Fl_Group) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Group_as_group(self_: *mut Fl_Group) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Group_set_deimage(arg1: *mut Fl_Group, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_deimage(arg1: *const Fl_Group) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Group_set_callback(arg1: *mut Fl_Group, arg2: Fl_Callback, arg3: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_set_deleter(
        arg1: *mut Fl_Group,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Group_visible(self_: *const Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_visible_r(self_: *const Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_active(self_: *const Fl_Group) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Group_active_r(self_: *const Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_callback(self_: *const Fl_Group) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Group_set_deletion_callback(
        self_: *mut Fl_Group,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Group_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Group;
}
extern "C" {
    pub fn Fl_Group_super_draw(ptr: *mut Fl_Widget, flag: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_current() -> *mut Fl_Group;
}
extern "C" {
    pub fn Fl_Group_set_current(grp: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_begin(self_: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_end(self_: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_find(self_: *mut Fl_Group, arg1: *const cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_add(self_: *mut Fl_Group, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_insert(self_: *mut Fl_Group, arg1: *mut cty::c_void, pos: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_remove(self_: *mut Fl_Group, wid: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_remove_by_index(self_: *mut Fl_Group, idx: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_clear(self_: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_children(self_: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_child(arg1: *mut Fl_Group, index: cty::c_int) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Group_resizable(self_: *mut Fl_Group, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Group_set_clip_children(self_: *mut Fl_Group, c: cty::c_int);
}
extern "C" {
    pub fn Fl_Group_clip_children(self_: *mut Fl_Group) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Group_init_sizes(self_: *mut Fl_Group);
}
extern "C" {
    pub fn Fl_Group_draw_child(self_: *const Fl_Group, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Group_update_child(self_: *const Fl_Group, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Group_draw_outside_label(self_: *const Fl_Group, w: *const Fl_Widget);
}
extern "C" {
    pub fn Fl_Group_draw_children(self_: *mut Fl_Group);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Pack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Pack_new(
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
        title: *const cty::c_char,
    ) -> *mut Fl_Pack;
}
extern "C" {
    pub fn Fl_Pack_x(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_y(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_width(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_height(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_label(arg1: *mut Fl_Pack) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Pack_set_label(arg1: *mut Fl_Pack, title: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Pack_redraw(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_show(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_hide(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_activate(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_deactivate(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_redraw_label(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_resize(
        arg1: *mut Fl_Pack,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Pack_widget_resize(
        arg1: *mut Fl_Pack,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Pack_tooltip(arg1: *mut Fl_Pack) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Pack_set_tooltip(arg1: *mut Fl_Pack, txt: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Pack_get_type(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_set_type(arg1: *mut Fl_Pack, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_color(arg1: *mut Fl_Pack) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Pack_set_color(arg1: *mut Fl_Pack, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Pack_measure_label(
        arg1: *const Fl_Pack,
        arg2: *mut cty::c_int,
        arg3: *mut cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Pack_label_color(arg1: *mut Fl_Pack) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Pack_set_label_color(arg1: *mut Fl_Pack, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Pack_label_font(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_set_label_font(arg1: *mut Fl_Pack, font: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_label_size(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_set_label_size(arg1: *mut Fl_Pack, sz: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_label_type(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_set_label_type(arg1: *mut Fl_Pack, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_box(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_set_box(arg1: *mut Fl_Pack, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_changed(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_set_changed(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_clear_changed(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_align(arg1: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_set_align(arg1: *mut Fl_Pack, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_delete(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_set_image(arg1: *mut Fl_Pack, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_handle(self_: *mut Fl_Pack, cb: custom_handler_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_handle_event(self_: *mut Fl_Pack, event: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_draw(self_: *mut Fl_Pack, cb: custom_draw_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_resize_callback(
        self_: *mut Fl_Pack,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: cty::c_int,
                y: cty::c_int,
                w: cty::c_int,
                h: cty::c_int,
                arg2: *mut cty::c_void,
            ),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Pack_set_when(arg1: *mut Fl_Pack, arg2: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_when(arg1: *const Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_image(arg1: *const Fl_Pack) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_parent(self_: *const Fl_Pack) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_selection_color(arg1: *mut Fl_Pack) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Pack_set_selection_color(arg1: *mut Fl_Pack, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Pack_do_callback(arg1: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_inside(self_: *const Fl_Pack, arg1: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_window(arg1: *const Fl_Pack) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_top_window(arg1: *const Fl_Pack) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_takes_events(arg1: *const Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_user_data(arg1: *const Fl_Pack) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_take_focus(self_: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_set_visible_focus(self_: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_clear_visible_focus(self_: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_visible_focus(self_: *mut Fl_Pack, v: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_has_visible_focus(self_: *mut Fl_Pack) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Pack_set_user_data(arg1: *mut Fl_Pack, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_draw_data(self_: *const Fl_Pack) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_handle_data(self_: *const Fl_Pack) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_set_draw_data(self_: *mut Fl_Pack, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_set_handle_data(self_: *mut Fl_Pack, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_damage(self_: *const Fl_Pack) -> cty::c_uchar;
}
extern "C" {
    pub fn Fl_Pack_set_damage(self_: *mut Fl_Pack, flag: cty::c_uchar);
}
extern "C" {
    pub fn Fl_Pack_set_damage_area(
        self_: *mut Fl_Pack,
        flag: cty::c_uchar,
        x: cty::c_int,
        y: cty::c_int,
        w: cty::c_int,
        h: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Pack_clear_damage(self_: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_as_window(self_: *mut Fl_Pack) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_as_group(self_: *mut Fl_Pack) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_set_deimage(arg1: *mut Fl_Pack, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_deimage(arg1: *const Fl_Pack) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Pack_set_callback(arg1: *mut Fl_Pack, arg2: Fl_Callback, arg3: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_set_deleter(
        arg1: *mut Fl_Pack,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Pack_visible(self_: *const Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_visible_r(self_: *const Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_active(self_: *const Fl_Pack) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Pack_active_r(self_: *const Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_callback(self_: *const Fl_Pack) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Pack_set_deletion_callback(
        self_: *mut Fl_Pack,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Pack_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Pack;
}
extern "C" {
    pub fn Fl_Pack_super_draw(ptr: *mut Fl_Widget, flag: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_spacing(self_: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_set_spacing(self_: *mut Fl_Pack, spacing: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_begin(self_: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_end(self_: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_find(self_: *mut Fl_Pack, arg1: *const cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_add(self_: *mut Fl_Pack, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_insert(self_: *mut Fl_Pack, arg1: *mut cty::c_void, pos: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_remove(self_: *mut Fl_Pack, wid: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_remove_by_index(self_: *mut Fl_Pack, idx: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_clear(self_: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_children(self_: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_child(arg1: *mut Fl_Pack, index: cty::c_int) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Pack_resizable(self_: *mut Fl_Pack, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Pack_set_clip_children(self_: *mut Fl_Pack, c: cty::c_int);
}
extern "C" {
    pub fn Fl_Pack_clip_children(self_: *mut Fl_Pack) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Pack_init_sizes(self_: *mut Fl_Pack);
}
extern "C" {
    pub fn Fl_Pack_draw_child(self_: *const Fl_Pack, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Pack_update_child(self_: *const Fl_Pack, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Pack_draw_outside_label(self_: *const Fl_Pack, w: *const Fl_Widget);
}
extern "C" {
    pub fn Fl_Pack_draw_children(self_: *mut Fl_Pack);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Scroll {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Scroll_new(
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
        title: *const cty::c_char,
    ) -> *mut Fl_Scroll;
}
extern "C" {
    pub fn Fl_Scroll_x(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_y(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_width(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_height(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_label(arg1: *mut Fl_Scroll) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Scroll_set_label(arg1: *mut Fl_Scroll, title: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Scroll_redraw(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_show(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_hide(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_activate(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_deactivate(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_redraw_label(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_resize(
        arg1: *mut Fl_Scroll,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Scroll_widget_resize(
        arg1: *mut Fl_Scroll,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Scroll_tooltip(arg1: *mut Fl_Scroll) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Scroll_set_tooltip(arg1: *mut Fl_Scroll, txt: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Scroll_get_type(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_set_type(arg1: *mut Fl_Scroll, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_color(arg1: *mut Fl_Scroll) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Scroll_set_color(arg1: *mut Fl_Scroll, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Scroll_measure_label(
        arg1: *const Fl_Scroll,
        arg2: *mut cty::c_int,
        arg3: *mut cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Scroll_label_color(arg1: *mut Fl_Scroll) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Scroll_set_label_color(arg1: *mut Fl_Scroll, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Scroll_label_font(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_set_label_font(arg1: *mut Fl_Scroll, font: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_label_size(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_set_label_size(arg1: *mut Fl_Scroll, sz: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_label_type(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_set_label_type(arg1: *mut Fl_Scroll, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_box(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_set_box(arg1: *mut Fl_Scroll, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_changed(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_set_changed(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_clear_changed(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_align(arg1: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_set_align(arg1: *mut Fl_Scroll, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_delete(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_set_image(arg1: *mut Fl_Scroll, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_handle(
        self_: *mut Fl_Scroll,
        cb: custom_handler_callback,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Scroll_handle_event(self_: *mut Fl_Scroll, event: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_draw(self_: *mut Fl_Scroll, cb: custom_draw_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_resize_callback(
        self_: *mut Fl_Scroll,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: cty::c_int,
                y: cty::c_int,
                w: cty::c_int,
                h: cty::c_int,
                arg2: *mut cty::c_void,
            ),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Scroll_set_when(arg1: *mut Fl_Scroll, arg2: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_when(arg1: *const Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_image(arg1: *const Fl_Scroll) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_parent(self_: *const Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_selection_color(arg1: *mut Fl_Scroll) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Scroll_set_selection_color(arg1: *mut Fl_Scroll, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Scroll_do_callback(arg1: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_inside(self_: *const Fl_Scroll, arg1: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_window(arg1: *const Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_top_window(arg1: *const Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_takes_events(arg1: *const Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_user_data(arg1: *const Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_take_focus(self_: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_set_visible_focus(self_: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_clear_visible_focus(self_: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_visible_focus(self_: *mut Fl_Scroll, v: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_has_visible_focus(self_: *mut Fl_Scroll) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Scroll_set_user_data(arg1: *mut Fl_Scroll, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_draw_data(self_: *const Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_handle_data(self_: *const Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_set_draw_data(self_: *mut Fl_Scroll, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_set_handle_data(self_: *mut Fl_Scroll, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_damage(self_: *const Fl_Scroll) -> cty::c_uchar;
}
extern "C" {
    pub fn Fl_Scroll_set_damage(self_: *mut Fl_Scroll, flag: cty::c_uchar);
}
extern "C" {
    pub fn Fl_Scroll_set_damage_area(
        self_: *mut Fl_Scroll,
        flag: cty::c_uchar,
        x: cty::c_int,
        y: cty::c_int,
        w: cty::c_int,
        h: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Scroll_clear_damage(self_: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_as_window(self_: *mut Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_as_group(self_: *mut Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_set_deimage(arg1: *mut Fl_Scroll, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_deimage(arg1: *const Fl_Scroll) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_set_callback(arg1: *mut Fl_Scroll, arg2: Fl_Callback, arg3: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_set_deleter(
        arg1: *mut Fl_Scroll,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Scroll_visible(self_: *const Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_visible_r(self_: *const Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_active(self_: *const Fl_Scroll) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Scroll_active_r(self_: *const Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_callback(self_: *const Fl_Scroll) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Scroll_set_deletion_callback(
        self_: *mut Fl_Scroll,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Scroll_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Scroll;
}
extern "C" {
    pub fn Fl_Scroll_super_draw(ptr: *mut Fl_Widget, flag: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_scrollbar(self_: *mut Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_hscrollbar(self_: *mut Fl_Scroll) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Scroll_xposition(self_: *const Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_yposition(self_: *const Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_scroll_to(self_: *mut Fl_Scroll, arg1: cty::c_int, arg2: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_scrollbar_size(self_: *const Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_set_scrollbar_size(self_: *mut Fl_Scroll, newSize: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_begin(self_: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_end(self_: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_find(self_: *mut Fl_Scroll, arg1: *const cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_add(self_: *mut Fl_Scroll, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_insert(self_: *mut Fl_Scroll, arg1: *mut cty::c_void, pos: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_remove(self_: *mut Fl_Scroll, wid: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_remove_by_index(self_: *mut Fl_Scroll, idx: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_clear(self_: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_children(self_: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_child(arg1: *mut Fl_Scroll, index: cty::c_int) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Scroll_resizable(self_: *mut Fl_Scroll, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Scroll_set_clip_children(self_: *mut Fl_Scroll, c: cty::c_int);
}
extern "C" {
    pub fn Fl_Scroll_clip_children(self_: *mut Fl_Scroll) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Scroll_init_sizes(self_: *mut Fl_Scroll);
}
extern "C" {
    pub fn Fl_Scroll_draw_child(self_: *const Fl_Scroll, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Scroll_update_child(self_: *const Fl_Scroll, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Scroll_draw_outside_label(self_: *const Fl_Scroll, w: *const Fl_Widget);
}
extern "C" {
    pub fn Fl_Scroll_draw_children(self_: *mut Fl_Scroll);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Tabs {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Tabs_new(
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
        title: *const cty::c_char,
    ) -> *mut Fl_Tabs;
}
extern "C" {
    pub fn Fl_Tabs_x(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_y(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_width(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_height(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_label(arg1: *mut Fl_Tabs) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Tabs_set_label(arg1: *mut Fl_Tabs, title: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Tabs_redraw(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_show(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_hide(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_activate(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_deactivate(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_redraw_label(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_resize(
        arg1: *mut Fl_Tabs,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Tabs_widget_resize(
        arg1: *mut Fl_Tabs,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Tabs_tooltip(arg1: *mut Fl_Tabs) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Tabs_set_tooltip(arg1: *mut Fl_Tabs, txt: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Tabs_get_type(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_set_type(arg1: *mut Fl_Tabs, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_color(arg1: *mut Fl_Tabs) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tabs_set_color(arg1: *mut Fl_Tabs, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Tabs_measure_label(
        arg1: *const Fl_Tabs,
        arg2: *mut cty::c_int,
        arg3: *mut cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Tabs_label_color(arg1: *mut Fl_Tabs) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tabs_set_label_color(arg1: *mut Fl_Tabs, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Tabs_label_font(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_set_label_font(arg1: *mut Fl_Tabs, font: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_label_size(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_set_label_size(arg1: *mut Fl_Tabs, sz: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_label_type(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_set_label_type(arg1: *mut Fl_Tabs, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_box(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_set_box(arg1: *mut Fl_Tabs, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_changed(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_set_changed(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_clear_changed(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_align(arg1: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_set_align(arg1: *mut Fl_Tabs, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_delete(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_set_image(arg1: *mut Fl_Tabs, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_handle(self_: *mut Fl_Tabs, cb: custom_handler_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_handle_event(self_: *mut Fl_Tabs, event: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_draw(self_: *mut Fl_Tabs, cb: custom_draw_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_resize_callback(
        self_: *mut Fl_Tabs,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: cty::c_int,
                y: cty::c_int,
                w: cty::c_int,
                h: cty::c_int,
                arg2: *mut cty::c_void,
            ),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Tabs_set_when(arg1: *mut Fl_Tabs, arg2: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_when(arg1: *const Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_image(arg1: *const Fl_Tabs) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_parent(self_: *const Fl_Tabs) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_selection_color(arg1: *mut Fl_Tabs) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tabs_set_selection_color(arg1: *mut Fl_Tabs, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Tabs_do_callback(arg1: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_inside(self_: *const Fl_Tabs, arg1: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_window(arg1: *const Fl_Tabs) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_top_window(arg1: *const Fl_Tabs) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_takes_events(arg1: *const Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_user_data(arg1: *const Fl_Tabs) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_take_focus(self_: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_set_visible_focus(self_: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_clear_visible_focus(self_: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_visible_focus(self_: *mut Fl_Tabs, v: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_has_visible_focus(self_: *mut Fl_Tabs) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tabs_set_user_data(arg1: *mut Fl_Tabs, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_draw_data(self_: *const Fl_Tabs) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_handle_data(self_: *const Fl_Tabs) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_set_draw_data(self_: *mut Fl_Tabs, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_set_handle_data(self_: *mut Fl_Tabs, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_damage(self_: *const Fl_Tabs) -> cty::c_uchar;
}
extern "C" {
    pub fn Fl_Tabs_set_damage(self_: *mut Fl_Tabs, flag: cty::c_uchar);
}
extern "C" {
    pub fn Fl_Tabs_set_damage_area(
        self_: *mut Fl_Tabs,
        flag: cty::c_uchar,
        x: cty::c_int,
        y: cty::c_int,
        w: cty::c_int,
        h: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Tabs_clear_damage(self_: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_as_window(self_: *mut Fl_Tabs) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_as_group(self_: *mut Fl_Tabs) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_set_deimage(arg1: *mut Fl_Tabs, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_deimage(arg1: *const Fl_Tabs) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Tabs_set_callback(arg1: *mut Fl_Tabs, arg2: Fl_Callback, arg3: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_set_deleter(
        arg1: *mut Fl_Tabs,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Tabs_visible(self_: *const Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_visible_r(self_: *const Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_active(self_: *const Fl_Tabs) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tabs_active_r(self_: *const Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_callback(self_: *const Fl_Tabs) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Tabs_set_deletion_callback(
        self_: *mut Fl_Tabs,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Tabs_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Tabs;
}
extern "C" {
    pub fn Fl_Tabs_super_draw(ptr: *mut Fl_Widget, flag: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_value(self_: *mut Fl_Tabs) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Tabs_set_value(self_: *mut Fl_Tabs, w: *mut Fl_Widget) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_push(self_: *const Fl_Tabs) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Tabs_set_push(self_: *mut Fl_Tabs, w: *mut Fl_Widget) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_client_area(
        self_: *mut Fl_Tabs,
        rx: *mut cty::c_int,
        ry: *mut cty::c_int,
        rw: *mut cty::c_int,
        rh: *mut cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Tabs_set_tab_align(self_: *mut Fl_Tabs, a: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_tab_align(self_: *const Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_handle_overflow(self_: *mut Fl_Tabs, ov: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_begin(self_: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_end(self_: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_find(self_: *mut Fl_Tabs, arg1: *const cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_add(self_: *mut Fl_Tabs, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_insert(self_: *mut Fl_Tabs, arg1: *mut cty::c_void, pos: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_remove(self_: *mut Fl_Tabs, wid: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_remove_by_index(self_: *mut Fl_Tabs, idx: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_clear(self_: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_children(self_: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_child(arg1: *mut Fl_Tabs, index: cty::c_int) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Tabs_resizable(self_: *mut Fl_Tabs, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tabs_set_clip_children(self_: *mut Fl_Tabs, c: cty::c_int);
}
extern "C" {
    pub fn Fl_Tabs_clip_children(self_: *mut Fl_Tabs) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tabs_init_sizes(self_: *mut Fl_Tabs);
}
extern "C" {
    pub fn Fl_Tabs_draw_child(self_: *const Fl_Tabs, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Tabs_update_child(self_: *const Fl_Tabs, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Tabs_draw_outside_label(self_: *const Fl_Tabs, w: *const Fl_Widget);
}
extern "C" {
    pub fn Fl_Tabs_draw_children(self_: *mut Fl_Tabs);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Tile {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Tile_new(
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
        title: *const cty::c_char,
    ) -> *mut Fl_Tile;
}
extern "C" {
    pub fn Fl_Tile_x(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_y(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_width(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_height(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_label(arg1: *mut Fl_Tile) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Tile_set_label(arg1: *mut Fl_Tile, title: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Tile_redraw(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_show(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_hide(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_activate(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_deactivate(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_redraw_label(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_resize(
        arg1: *mut Fl_Tile,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Tile_widget_resize(
        arg1: *mut Fl_Tile,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Tile_tooltip(arg1: *mut Fl_Tile) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Tile_set_tooltip(arg1: *mut Fl_Tile, txt: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Tile_get_type(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_set_type(arg1: *mut Fl_Tile, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_color(arg1: *mut Fl_Tile) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tile_set_color(arg1: *mut Fl_Tile, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Tile_measure_label(
        arg1: *const Fl_Tile,
        arg2: *mut cty::c_int,
        arg3: *mut cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Tile_label_color(arg1: *mut Fl_Tile) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tile_set_label_color(arg1: *mut Fl_Tile, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Tile_label_font(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_set_label_font(arg1: *mut Fl_Tile, font: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_label_size(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_set_label_size(arg1: *mut Fl_Tile, sz: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_label_type(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_set_label_type(arg1: *mut Fl_Tile, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_box(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_set_box(arg1: *mut Fl_Tile, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_changed(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_set_changed(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_clear_changed(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_align(arg1: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_set_align(arg1: *mut Fl_Tile, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_delete(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_set_image(arg1: *mut Fl_Tile, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_handle(self_: *mut Fl_Tile, cb: custom_handler_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_handle_event(self_: *mut Fl_Tile, event: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_draw(self_: *mut Fl_Tile, cb: custom_draw_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_resize_callback(
        self_: *mut Fl_Tile,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: cty::c_int,
                y: cty::c_int,
                w: cty::c_int,
                h: cty::c_int,
                arg2: *mut cty::c_void,
            ),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Tile_set_when(arg1: *mut Fl_Tile, arg2: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_when(arg1: *const Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_image(arg1: *const Fl_Tile) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_parent(self_: *const Fl_Tile) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_selection_color(arg1: *mut Fl_Tile) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tile_set_selection_color(arg1: *mut Fl_Tile, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Tile_do_callback(arg1: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_inside(self_: *const Fl_Tile, arg1: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_window(arg1: *const Fl_Tile) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_top_window(arg1: *const Fl_Tile) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_takes_events(arg1: *const Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_user_data(arg1: *const Fl_Tile) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_take_focus(self_: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_set_visible_focus(self_: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_clear_visible_focus(self_: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_visible_focus(self_: *mut Fl_Tile, v: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_has_visible_focus(self_: *mut Fl_Tile) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tile_set_user_data(arg1: *mut Fl_Tile, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_draw_data(self_: *const Fl_Tile) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_handle_data(self_: *const Fl_Tile) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_set_draw_data(self_: *mut Fl_Tile, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_set_handle_data(self_: *mut Fl_Tile, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_damage(self_: *const Fl_Tile) -> cty::c_uchar;
}
extern "C" {
    pub fn Fl_Tile_set_damage(self_: *mut Fl_Tile, flag: cty::c_uchar);
}
extern "C" {
    pub fn Fl_Tile_set_damage_area(
        self_: *mut Fl_Tile,
        flag: cty::c_uchar,
        x: cty::c_int,
        y: cty::c_int,
        w: cty::c_int,
        h: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Tile_clear_damage(self_: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_as_window(self_: *mut Fl_Tile) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_as_group(self_: *mut Fl_Tile) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_set_deimage(arg1: *mut Fl_Tile, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_deimage(arg1: *const Fl_Tile) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Tile_set_callback(arg1: *mut Fl_Tile, arg2: Fl_Callback, arg3: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_set_deleter(
        arg1: *mut Fl_Tile,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Tile_visible(self_: *const Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_visible_r(self_: *const Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_active(self_: *const Fl_Tile) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Tile_active_r(self_: *const Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_callback(self_: *const Fl_Tile) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Tile_set_deletion_callback(
        self_: *mut Fl_Tile,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Tile_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Tile;
}
extern "C" {
    pub fn Fl_Tile_super_draw(ptr: *mut Fl_Widget, flag: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_begin(self_: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_end(self_: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_find(self_: *mut Fl_Tile, arg1: *const cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_add(self_: *mut Fl_Tile, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_insert(self_: *mut Fl_Tile, arg1: *mut cty::c_void, pos: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_remove(self_: *mut Fl_Tile, wid: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_remove_by_index(self_: *mut Fl_Tile, idx: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_clear(self_: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_children(self_: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_child(arg1: *mut Fl_Tile, index: cty::c_int) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Tile_resizable(self_: *mut Fl_Tile, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Tile_set_clip_children(self_: *mut Fl_Tile, c: cty::c_int);
}
extern "C" {
    pub fn Fl_Tile_clip_children(self_: *mut Fl_Tile) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Tile_init_sizes(self_: *mut Fl_Tile);
}
extern "C" {
    pub fn Fl_Tile_draw_child(self_: *const Fl_Tile, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Tile_update_child(self_: *const Fl_Tile, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Tile_draw_outside_label(self_: *const Fl_Tile, w: *const Fl_Widget);
}
extern "C" {
    pub fn Fl_Tile_draw_children(self_: *mut Fl_Tile);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Wizard {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Wizard_new(
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
        title: *const cty::c_char,
    ) -> *mut Fl_Wizard;
}
extern "C" {
    pub fn Fl_Wizard_x(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_y(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_width(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_height(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_label(arg1: *mut Fl_Wizard) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Wizard_set_label(arg1: *mut Fl_Wizard, title: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Wizard_redraw(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_show(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_hide(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_activate(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_deactivate(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_redraw_label(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_resize(
        arg1: *mut Fl_Wizard,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Wizard_widget_resize(
        arg1: *mut Fl_Wizard,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Wizard_tooltip(arg1: *mut Fl_Wizard) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Wizard_set_tooltip(arg1: *mut Fl_Wizard, txt: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Wizard_get_type(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_set_type(arg1: *mut Fl_Wizard, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_color(arg1: *mut Fl_Wizard) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Wizard_set_color(arg1: *mut Fl_Wizard, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Wizard_measure_label(
        arg1: *const Fl_Wizard,
        arg2: *mut cty::c_int,
        arg3: *mut cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Wizard_label_color(arg1: *mut Fl_Wizard) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Wizard_set_label_color(arg1: *mut Fl_Wizard, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Wizard_label_font(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_set_label_font(arg1: *mut Fl_Wizard, font: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_label_size(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_set_label_size(arg1: *mut Fl_Wizard, sz: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_label_type(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_set_label_type(arg1: *mut Fl_Wizard, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_box(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_set_box(arg1: *mut Fl_Wizard, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_changed(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_set_changed(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_clear_changed(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_align(arg1: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_set_align(arg1: *mut Fl_Wizard, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_delete(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_set_image(arg1: *mut Fl_Wizard, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_handle(
        self_: *mut Fl_Wizard,
        cb: custom_handler_callback,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Wizard_handle_event(self_: *mut Fl_Wizard, event: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_draw(self_: *mut Fl_Wizard, cb: custom_draw_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_resize_callback(
        self_: *mut Fl_Wizard,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: cty::c_int,
                y: cty::c_int,
                w: cty::c_int,
                h: cty::c_int,
                arg2: *mut cty::c_void,
            ),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Wizard_set_when(arg1: *mut Fl_Wizard, arg2: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_when(arg1: *const Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_image(arg1: *const Fl_Wizard) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_parent(self_: *const Fl_Wizard) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_selection_color(arg1: *mut Fl_Wizard) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Wizard_set_selection_color(arg1: *mut Fl_Wizard, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Wizard_do_callback(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_inside(self_: *const Fl_Wizard, arg1: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_window(arg1: *const Fl_Wizard) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_top_window(arg1: *const Fl_Wizard) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_takes_events(arg1: *const Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_user_data(arg1: *const Fl_Wizard) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_take_focus(self_: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_set_visible_focus(self_: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_clear_visible_focus(self_: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_visible_focus(self_: *mut Fl_Wizard, v: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_has_visible_focus(self_: *mut Fl_Wizard) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Wizard_set_user_data(arg1: *mut Fl_Wizard, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_draw_data(self_: *const Fl_Wizard) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_handle_data(self_: *const Fl_Wizard) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_set_draw_data(self_: *mut Fl_Wizard, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_set_handle_data(self_: *mut Fl_Wizard, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_damage(self_: *const Fl_Wizard) -> cty::c_uchar;
}
extern "C" {
    pub fn Fl_Wizard_set_damage(self_: *mut Fl_Wizard, flag: cty::c_uchar);
}
extern "C" {
    pub fn Fl_Wizard_set_damage_area(
        self_: *mut Fl_Wizard,
        flag: cty::c_uchar,
        x: cty::c_int,
        y: cty::c_int,
        w: cty::c_int,
        h: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Wizard_clear_damage(self_: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_as_window(self_: *mut Fl_Wizard) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_as_group(self_: *mut Fl_Wizard) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_set_deimage(arg1: *mut Fl_Wizard, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_deimage(arg1: *const Fl_Wizard) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Wizard_set_callback(arg1: *mut Fl_Wizard, arg2: Fl_Callback, arg3: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_set_deleter(
        arg1: *mut Fl_Wizard,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Wizard_visible(self_: *const Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_visible_r(self_: *const Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_active(self_: *const Fl_Wizard) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Wizard_active_r(self_: *const Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_callback(self_: *const Fl_Wizard) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Wizard_set_deletion_callback(
        self_: *mut Fl_Wizard,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Wizard_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Wizard;
}
extern "C" {
    pub fn Fl_Wizard_super_draw(ptr: *mut Fl_Widget, flag: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_next(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_prev(arg1: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_value(arg1: *mut Fl_Wizard) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Wizard_set_value(arg1: *mut Fl_Wizard, arg2: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Wizard_begin(self_: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_end(self_: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_find(self_: *mut Fl_Wizard, arg1: *const cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_add(self_: *mut Fl_Wizard, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_insert(self_: *mut Fl_Wizard, arg1: *mut cty::c_void, pos: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_remove(self_: *mut Fl_Wizard, wid: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_remove_by_index(self_: *mut Fl_Wizard, idx: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_clear(self_: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_children(self_: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_child(arg1: *mut Fl_Wizard, index: cty::c_int) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Wizard_resizable(self_: *mut Fl_Wizard, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Wizard_set_clip_children(self_: *mut Fl_Wizard, c: cty::c_int);
}
extern "C" {
    pub fn Fl_Wizard_clip_children(self_: *mut Fl_Wizard) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Wizard_init_sizes(self_: *mut Fl_Wizard);
}
extern "C" {
    pub fn Fl_Wizard_draw_child(self_: *const Fl_Wizard, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Wizard_update_child(self_: *const Fl_Wizard, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Wizard_draw_outside_label(self_: *const Fl_Wizard, w: *const Fl_Widget);
}
extern "C" {
    pub fn Fl_Wizard_draw_children(self_: *mut Fl_Wizard);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Color_Chooser {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Color_Chooser_new(
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
        title: *const cty::c_char,
    ) -> *mut Fl_Color_Chooser;
}
extern "C" {
    pub fn Fl_Color_Chooser_x(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_y(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_width(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_height(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_label(arg1: *mut Fl_Color_Chooser) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_label(arg1: *mut Fl_Color_Chooser, title: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Color_Chooser_redraw(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_show(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_hide(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_activate(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_deactivate(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_redraw_label(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_resize(
        arg1: *mut Fl_Color_Chooser,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_widget_resize(
        arg1: *mut Fl_Color_Chooser,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_tooltip(arg1: *mut Fl_Color_Chooser) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_tooltip(arg1: *mut Fl_Color_Chooser, txt: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Color_Chooser_get_type(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_type(arg1: *mut Fl_Color_Chooser, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_color(arg1: *mut Fl_Color_Chooser) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_color(arg1: *mut Fl_Color_Chooser, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Color_Chooser_measure_label(
        arg1: *const Fl_Color_Chooser,
        arg2: *mut cty::c_int,
        arg3: *mut cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_label_color(arg1: *mut Fl_Color_Chooser) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_label_color(arg1: *mut Fl_Color_Chooser, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Color_Chooser_label_font(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_label_font(arg1: *mut Fl_Color_Chooser, font: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_label_size(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_label_size(arg1: *mut Fl_Color_Chooser, sz: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_label_type(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_label_type(arg1: *mut Fl_Color_Chooser, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_box(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_box(arg1: *mut Fl_Color_Chooser, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_changed(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_changed(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_clear_changed(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_align(arg1: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_align(arg1: *mut Fl_Color_Chooser, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_delete(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_set_image(arg1: *mut Fl_Color_Chooser, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Color_Chooser_handle(
        self_: *mut Fl_Color_Chooser,
        cb: custom_handler_callback,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_handle_event(self_: *mut Fl_Color_Chooser, event: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_draw(
        self_: *mut Fl_Color_Chooser,
        cb: custom_draw_callback,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_resize_callback(
        self_: *mut Fl_Color_Chooser,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: cty::c_int,
                y: cty::c_int,
                w: cty::c_int,
                h: cty::c_int,
                arg2: *mut cty::c_void,
            ),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_set_when(arg1: *mut Fl_Color_Chooser, arg2: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_when(arg1: *const Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_image(arg1: *const Fl_Color_Chooser) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_parent(self_: *const Fl_Color_Chooser) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_selection_color(arg1: *mut Fl_Color_Chooser) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_selection_color(arg1: *mut Fl_Color_Chooser, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Color_Chooser_do_callback(arg1: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_inside(
        self_: *const Fl_Color_Chooser,
        arg1: *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_window(arg1: *const Fl_Color_Chooser) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_top_window(arg1: *const Fl_Color_Chooser) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_takes_events(arg1: *const Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_user_data(arg1: *const Fl_Color_Chooser) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_take_focus(self_: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_visible_focus(self_: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_clear_visible_focus(self_: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_visible_focus(self_: *mut Fl_Color_Chooser, v: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_has_visible_focus(self_: *mut Fl_Color_Chooser) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_user_data(arg1: *mut Fl_Color_Chooser, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Color_Chooser_draw_data(self_: *const Fl_Color_Chooser) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_handle_data(self_: *const Fl_Color_Chooser) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_draw_data(self_: *mut Fl_Color_Chooser, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Color_Chooser_set_handle_data(self_: *mut Fl_Color_Chooser, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Color_Chooser_damage(self_: *const Fl_Color_Chooser) -> cty::c_uchar;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_damage(self_: *mut Fl_Color_Chooser, flag: cty::c_uchar);
}
extern "C" {
    pub fn Fl_Color_Chooser_set_damage_area(
        self_: *mut Fl_Color_Chooser,
        flag: cty::c_uchar,
        x: cty::c_int,
        y: cty::c_int,
        w: cty::c_int,
        h: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_clear_damage(self_: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_as_window(self_: *mut Fl_Color_Chooser) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_as_group(self_: *mut Fl_Color_Chooser) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_deimage(arg1: *mut Fl_Color_Chooser, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Color_Chooser_deimage(arg1: *const Fl_Color_Chooser) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_callback(
        arg1: *mut Fl_Color_Chooser,
        arg2: Fl_Callback,
        arg3: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_set_deleter(
        arg1: *mut Fl_Color_Chooser,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_visible(self_: *const Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_visible_r(self_: *const Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_active(self_: *const Fl_Color_Chooser) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Color_Chooser_active_r(self_: *const Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_callback(self_: *const Fl_Color_Chooser) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_deletion_callback(
        self_: *mut Fl_Color_Chooser,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Color_Chooser;
}
extern "C" {
    pub fn Fl_Color_Chooser_super_draw(ptr: *mut Fl_Widget, flag: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_r(self_: *mut Fl_Color_Chooser) -> f64;
}
extern "C" {
    pub fn Fl_Color_Chooser_g(self_: *mut Fl_Color_Chooser) -> f64;
}
extern "C" {
    pub fn Fl_Color_Chooser_b(self_: *mut Fl_Color_Chooser) -> f64;
}
extern "C" {
    pub fn Fl_Color_Chooser_set_rgb(
        self_: *mut Fl_Color_Chooser,
        r: f64,
        g: f64,
        b: f64,
    ) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_begin(self_: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_end(self_: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_find(
        self_: *mut Fl_Color_Chooser,
        arg1: *const cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_add(self_: *mut Fl_Color_Chooser, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Color_Chooser_insert(
        self_: *mut Fl_Color_Chooser,
        arg1: *mut cty::c_void,
        pos: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Color_Chooser_remove(self_: *mut Fl_Color_Chooser, wid: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Color_Chooser_remove_by_index(self_: *mut Fl_Color_Chooser, idx: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_clear(self_: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_children(self_: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_child(arg1: *mut Fl_Color_Chooser, index: cty::c_int)
        -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Color_Chooser_resizable(self_: *mut Fl_Color_Chooser, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Color_Chooser_set_clip_children(self_: *mut Fl_Color_Chooser, c: cty::c_int);
}
extern "C" {
    pub fn Fl_Color_Chooser_clip_children(self_: *mut Fl_Color_Chooser) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Color_Chooser_init_sizes(self_: *mut Fl_Color_Chooser);
}
extern "C" {
    pub fn Fl_Color_Chooser_draw_child(self_: *const Fl_Color_Chooser, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Color_Chooser_update_child(self_: *const Fl_Color_Chooser, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Color_Chooser_draw_outside_label(self_: *const Fl_Color_Chooser, w: *const Fl_Widget);
}
extern "C" {
    pub fn Fl_Color_Chooser_draw_children(self_: *mut Fl_Color_Chooser);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Flex {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Flex_new(
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
        title: *const cty::c_char,
    ) -> *mut Fl_Flex;
}
extern "C" {
    pub fn Fl_Flex_x(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_y(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_width(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_height(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_label(arg1: *mut Fl_Flex) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Flex_set_label(arg1: *mut Fl_Flex, title: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Flex_redraw(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_show(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_hide(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_activate(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_deactivate(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_redraw_label(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_resize(
        arg1: *mut Fl_Flex,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Flex_widget_resize(
        arg1: *mut Fl_Flex,
        x: cty::c_int,
        y: cty::c_int,
        width: cty::c_int,
        height: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Flex_tooltip(arg1: *mut Fl_Flex) -> *const cty::c_char;
}
extern "C" {
    pub fn Fl_Flex_set_tooltip(arg1: *mut Fl_Flex, txt: *const cty::c_char);
}
extern "C" {
    pub fn Fl_Flex_get_type(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_set_type(arg1: *mut Fl_Flex, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_color(arg1: *mut Fl_Flex) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Flex_set_color(arg1: *mut Fl_Flex, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Flex_measure_label(
        arg1: *const Fl_Flex,
        arg2: *mut cty::c_int,
        arg3: *mut cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Flex_label_color(arg1: *mut Fl_Flex) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Flex_set_label_color(arg1: *mut Fl_Flex, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Flex_label_font(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_set_label_font(arg1: *mut Fl_Flex, font: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_label_size(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_set_label_size(arg1: *mut Fl_Flex, sz: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_label_type(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_set_label_type(arg1: *mut Fl_Flex, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_box(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_set_box(arg1: *mut Fl_Flex, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_changed(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_set_changed(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_clear_changed(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_align(arg1: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_set_align(arg1: *mut Fl_Flex, typ: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_delete(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_set_image(arg1: *mut Fl_Flex, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_handle(self_: *mut Fl_Flex, cb: custom_handler_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_handle_event(self_: *mut Fl_Flex, event: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_draw(self_: *mut Fl_Flex, cb: custom_draw_callback, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_resize_callback(
        self_: *mut Fl_Flex,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: cty::c_int,
                y: cty::c_int,
                w: cty::c_int,
                h: cty::c_int,
                arg2: *mut cty::c_void,
            ),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Flex_set_when(arg1: *mut Fl_Flex, arg2: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_when(arg1: *const Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_image(arg1: *const Fl_Flex) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_parent(self_: *const Fl_Flex) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_selection_color(arg1: *mut Fl_Flex) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Flex_set_selection_color(arg1: *mut Fl_Flex, color: cty::c_uint);
}
extern "C" {
    pub fn Fl_Flex_do_callback(arg1: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_inside(self_: *const Fl_Flex, arg1: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_window(arg1: *const Fl_Flex) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_top_window(arg1: *const Fl_Flex) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_takes_events(arg1: *const Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_user_data(arg1: *const Fl_Flex) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_take_focus(self_: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_set_visible_focus(self_: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_clear_visible_focus(self_: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_visible_focus(self_: *mut Fl_Flex, v: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_has_visible_focus(self_: *mut Fl_Flex) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Flex_set_user_data(arg1: *mut Fl_Flex, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_draw_data(self_: *const Fl_Flex) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_handle_data(self_: *const Fl_Flex) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_set_draw_data(self_: *mut Fl_Flex, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_set_handle_data(self_: *mut Fl_Flex, data: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_damage(self_: *const Fl_Flex) -> cty::c_uchar;
}
extern "C" {
    pub fn Fl_Flex_set_damage(self_: *mut Fl_Flex, flag: cty::c_uchar);
}
extern "C" {
    pub fn Fl_Flex_set_damage_area(
        self_: *mut Fl_Flex,
        flag: cty::c_uchar,
        x: cty::c_int,
        y: cty::c_int,
        w: cty::c_int,
        h: cty::c_int,
    );
}
extern "C" {
    pub fn Fl_Flex_clear_damage(self_: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_as_window(self_: *mut Fl_Flex) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_as_group(self_: *mut Fl_Flex) -> *mut cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_set_deimage(arg1: *mut Fl_Flex, arg2: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_deimage(arg1: *const Fl_Flex) -> *const cty::c_void;
}
extern "C" {
    pub fn Fl_Flex_set_callback(arg1: *mut Fl_Flex, arg2: Fl_Callback, arg3: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_set_deleter(
        arg1: *mut Fl_Flex,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Flex_visible(self_: *const Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_visible_r(self_: *const Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_active(self_: *const Fl_Flex) -> cty::c_uint;
}
extern "C" {
    pub fn Fl_Flex_active_r(self_: *const Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_callback(self_: *const Fl_Flex) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Flex_set_deletion_callback(
        self_: *mut Fl_Flex,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut cty::c_void),
        >,
        data: *mut cty::c_void,
    );
}
extern "C" {
    pub fn Fl_Flex_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Flex;
}
extern "C" {
    pub fn Fl_Flex_super_draw(ptr: *mut Fl_Widget, flag: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_set_size(self_: *mut Fl_Flex, w: *mut Fl_Widget, size: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_set_margin(self_: *mut Fl_Flex, m: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_margin(self_: *const Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_set_pad(self_: *mut Fl_Flex, p: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_pad(self_: *const Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_begin(self_: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_end(self_: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_find(self_: *mut Fl_Flex, arg1: *const cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_add(self_: *mut Fl_Flex, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_insert(self_: *mut Fl_Flex, arg1: *mut cty::c_void, pos: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_remove(self_: *mut Fl_Flex, wid: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_remove_by_index(self_: *mut Fl_Flex, idx: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_clear(self_: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_children(self_: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_child(arg1: *mut Fl_Flex, index: cty::c_int) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Flex_resizable(self_: *mut Fl_Flex, arg1: *mut cty::c_void);
}
extern "C" {
    pub fn Fl_Flex_set_clip_children(self_: *mut Fl_Flex, c: cty::c_int);
}
extern "C" {
    pub fn Fl_Flex_clip_children(self_: *mut Fl_Flex) -> cty::c_int;
}
extern "C" {
    pub fn Fl_Flex_init_sizes(self_: *mut Fl_Flex);
}
extern "C" {
    pub fn Fl_Flex_draw_child(self_: *const Fl_Flex, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Flex_update_child(self_: *const Fl_Flex, w: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Flex_draw_outside_label(self_: *const Fl_Flex, w: *const Fl_Widget);
}
extern "C" {
    pub fn Fl_Flex_draw_children(self_: *mut Fl_Flex);
}
